@model DemoMVC.ViewModels.AppointmentEditorViewModel

@{
    if (Model.EditorState == DemoMVC.Common.ObjectState.New)
    {
        ViewBag.EditorState = "Create";
    }
    else if (Model.EditorState == DemoMVC.Common.ObjectState.Modified)
    {
        ViewBag.EditorState = "Edit";
    }

    ViewBag.Title = ViewBag.EditorState + "Appointment";
}

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    @Html.HiddenFor(m => m.AppointmentID)
    @Html.HiddenFor(m => m.ProviderID)
    @Html.HiddenFor(m => m.ProfileID)
    <div class="form-group">
        <h2>
            @ViewBag.EditorState appointment for @Model.ProviderName
        </h2>
    </div>
    @Html.ValidationSummary()

    <div class="form-group">
        @Html.LabelFor(model => model.AppointmentDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.AppointmentDate, new { @class = "form-control date-picker", @Value = DateTime.Today.ToString("MM/dd/yyyy"), @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.AppointmentDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AppointmentStart, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.AppointmentStart, Model.TimeSelection, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AppointmentStart, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AppointmentEnd, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.AppointmentEnd, Model.TimeSelection, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AppointmentEnd, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="@ViewBag.EditorState" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to Previous Page", "PreviousPage")
</div>
